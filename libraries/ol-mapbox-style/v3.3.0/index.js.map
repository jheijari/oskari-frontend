{"version":3,"sources":["../index.js"],"names":["fontFamilyRegEx","stripQuotesRegEx","loadedFontFamilies","hasFontFamily","family","styleSheets","document","i","ii","length","styleSheet","cssRules","rules","j","jj","cssRule","type","match","cssText","replace","e","fontFamilies","googleFamilies","googleFonts","getNames","getFonts","fonts","families","map","font","split","indexOf","fontUrl","querySelector","markup","createElement","href","rel","getElementsByTagName","appendChild","spriteRegEx","withPath","url","path","toSpriteUrl","extension","parts","applyStyle","layer","glStyle","source","resolutions","Promise","resolve","reject","JSON","parse","version","Error","VectorLayer","VectorTileLayer","spriteScale","spriteData","spriteImageUrl","style","onChange","sprite","setStyle","window","devicePixelRatio","sizeFactor","spriteUrl","fetch","credentials","then","response","ok","json","statusText","spritesJson","undefined","Object","keys","catch","err","message","emptyObj","setBackground","updateStyle","element","getTargetElement","layout","paint","zoom","getView","getZoom","bg","backgroundColor","Color","toString","backgroundOpacity","visibility","on","applyBackground","layers","some","l","getSourceIdByRef","ref","sourceId","id","processStyle","baseUrl","host","accessToken","view","getCenter","setCenter","center","setZoom","fit","getProjection","getExtent","nearest","size","getSize","glLayers","geoJsonFormat","GeoJSON","layerIds","glLayer","glSource","glSourceId","mapid","transition","finalizeLayer","sources","tiles","tileGrid","tileSize","maxZoom","maxzoom","minZoom","minzoom","declutter","maxResolution","getMinZoom","getResolution","VectorTileSource","attributions","attribution","format","MVT","urls","visible","zIndex","tilejson","TileJSON","key","getState","tileJSONDoc","getTileJSON","Array","isArray","tile","getTileGrid","setSource","getAttributions","getMaxZoom","setMaxResolution","crossOrigin","XYZ","setTileLoadFunction","src","bbox","getTileCoordExtent","getTileCoord","getImage","TileLayer","data","features","geoJsonUrl","readFeatures","featureProjection","VectorSource","push","set","apply","Map","target","a","pathname","slice","join","substr","setTimeout","getSource","setVisible","addLayer","once","getLayer","layerId","getLayers","getArray","get"],"mappings":"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","sourcesContent":["/*\nol-mapbox-style - Use Mapbox Style objects with OpenLayers\nCopyright 2016-present Boundless Spatial, Inc.\nLicense: https://raw.githubusercontent.com/boundlessgeo/ol-mapbox-gl-style/master/LICENSE\n*/\n\nimport mb2css from 'mapbox-to-css-font';\nimport applyStyleFunction, {getValue} from './stylefunction';\nimport googleFonts from 'webfont-matcher/lib/fonts/google';\nimport {fromLonLat} from 'ol/proj';\nimport {createXYZ} from 'ol/tilegrid';\nimport Map from 'ol/Map';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport MVT from 'ol/format/MVT';\nimport {unByKey} from 'ol/Observable';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport TileJSON from 'ol/source/TileJSON';\nimport VectorSource from 'ol/source/Vector';\nimport VectorTileSource from 'ol/source/VectorTile';\nimport XYZ from 'ol/source/XYZ';\nimport {Color} from '@mapbox/mapbox-gl-style-spec';\n\nconst fontFamilyRegEx = /font-family: ?([^;]*);/;\nconst stripQuotesRegEx = /(\"|')/g;\nlet loadedFontFamilies;\nfunction hasFontFamily(family) {\n  if (!loadedFontFamilies) {\n    loadedFontFamilies = {};\n    const styleSheets = document.styleSheets;\n    for (let i = 0, ii = styleSheets.length; i < ii; ++i) {\n      const styleSheet = styleSheets[i];\n      try {\n        const cssRules = styleSheet.rules || styleSheet.cssRules;\n        if (cssRules) {\n          for (let j = 0, jj = cssRules.length; j < jj; ++j) {\n            const cssRule = cssRules[j];\n            if (cssRule.type == 5) {\n              const match = cssRule.cssText.match(fontFamilyRegEx);\n              loadedFontFamilies[match[1].replace(stripQuotesRegEx, '')] = true;\n            }\n          }\n        }\n      } catch (e) {\n        // empty catch block\n      }\n    }\n  }\n  return family in loadedFontFamilies;\n}\n\nconst fontFamilies = {};\nconst googleFamilies = googleFonts.getNames();\nfunction getFonts(fonts) {\n  if (fonts in fontFamilies) {\n    return fontFamilies[fonts];\n  }\n  const families = fonts.map(function(font) {\n    return mb2css(font, 1).split(' 1px ')[1].replace(/\"/g, '');\n  });\n  const family = families[0];\n  if (!hasFontFamily(family) && googleFamilies.indexOf(family) !== -1) {\n    const fontUrl = 'https://fonts.googleapis.com/css?family=' + family.replace(/ /g, '+');\n    if (!document.querySelector('link[href=\"' + fontUrl + '\"]')) {\n      const markup = document.createElement('link');\n      markup.href = fontUrl;\n      markup.rel = 'stylesheet';\n      document.getElementsByTagName('head')[0].appendChild(markup);\n    }\n  }\n  return fonts;\n}\n\nconst spriteRegEx = /^(.*)(\\?.*)$/;\n\nfunction withPath(url, path) {\n  if (path && url.indexOf('http') != 0) {\n    url = path + url;\n  }\n  return url;\n}\n\nfunction toSpriteUrl(url, path, extension) {\n  url = withPath(url, path);\n  const parts = url.match(spriteRegEx);\n  return parts ?\n    parts[1] + extension + (parts.length > 2 ? parts[2] : '') :\n    url + extension;\n}\n\n/**\n * Applies a style function to an `ol.layer.VectorTile` or `ol.layer.Vector`\n * with an `ol.source.VectorTile` or an `ol.source.Vector`. The style function\n * will render all layers from the `glStyle` object that use the specified\n * `source`, or a subset of layers from the same source. The source needs to be\n * a `\"type\": \"vector\"`, `\"type\": \"geojson\"` or `\"type\": \"raster\"` source.\n *\n * @param {ol.layer.VectorTile} layer OpenLayers layer.\n * @param {string|Object} glStyle Mapbox Style object.\n * @param {string} source `source` key or an array of layer `id`s from the\n * Mapbox Style object. When a `source` key is provided, all layers for the\n * specified source will be included in the style function. When layer `id`s\n * are provided, they must be from layers that use the same source.\n * @param {string} [path=undefined] Path of the style file. Only required when\n * a relative path is used with the `\"sprite\"` property of the style.\n * @param {Array<number>} [resolutions=undefined] Resolutions for mapping resolution to zoom level.\n * @return {Promise} Promise which will be resolved when the style can be used\n * for rendering.\n */\nexport function applyStyle(layer, glStyle, source, path, resolutions) {\n  return new Promise(function(resolve, reject) {\n\n    // TODO: figure out where best place to check source type is\n    // Note that the source arg is an array of gl layer ids and each must be\n    // dereferenced to get source type to validate\n    if (typeof glStyle != 'object') {\n      glStyle = JSON.parse(glStyle);\n    }\n    if (glStyle.version != 8) {\n      return reject(new Error('glStyle version 8 required.'));\n    }\n    if (!(layer instanceof VectorLayer) && !(layer instanceof VectorTileLayer)) {\n      return reject(new Error('Can only apply to VectorLayer or VectorTileLayer'));\n    }\n\n    let spriteScale, spriteData, spriteImageUrl, style;\n    function onChange() {\n      if (!style && (!glStyle.sprite || spriteData)) {\n        style = applyStyleFunction(layer, glStyle, source, resolutions, spriteData, spriteImageUrl, getFonts);\n        resolve();\n      } else if (style) {\n        layer.setStyle(style);\n        resolve();\n      } else {\n        reject(new Error('Something went wrong trying to apply style.'));\n      }\n    }\n\n    if (glStyle.sprite) {\n      spriteScale = window.devicePixelRatio >= 1.5 ? 0.5 : 1;\n      const sizeFactor = spriteScale == 0.5 ? '@2x' : '';\n      let spriteUrl = toSpriteUrl(glStyle.sprite, path, sizeFactor + '.json');\n\n      fetch(spriteUrl, {credentials: 'same-origin'})\n        .then(function(response) {\n          if (!response.ok && (sizeFactor !== '')) {\n            spriteUrl = toSpriteUrl(glStyle.sprite, path, '.json');\n            return fetch(spriteUrl, {credentials: 'same-origin'});\n          } else {\n            return response;\n          }\n        })\n        .then(function(response) {\n          if (response.ok) {\n            return response.json();\n          } else {\n            reject(new Error(`Problem fetching sprite from ${spriteUrl}: ${response.statusText}`));\n          }\n        })\n        .then(function(spritesJson) {\n          if ((spritesJson === undefined) || (Object.keys(spritesJson).length === 0)) {\n            return reject(new Error('No sprites found.'));\n          }\n          spriteData = spritesJson;\n          spriteImageUrl = toSpriteUrl(glStyle.sprite, path, sizeFactor + '.png');\n          onChange();\n        })\n        .catch(function(err) {\n          reject(new Error(`Sprites cannot be loaded: ${spriteUrl}: ${err.message}`));\n        });\n    } else {\n      onChange();\n    }\n\n  });\n}\n\nconst emptyObj = {};\n\nfunction setBackground(map, layer) {\n  function updateStyle() {\n    const element = map.getTargetElement();\n    if (!element) {\n      return;\n    }\n    const layout = layer.layout || {};\n    const paint = layer.paint || {};\n    const zoom = map.getView().getZoom();\n    if ('background-color' in paint) {\n      const bg = getValue(layer, 'paint', 'background-color', zoom, emptyObj);\n      element.style.backgroundColor = Color.parse(bg).toString();\n    }\n    if ('background-opacity' in paint) {\n      element.style.backgroundOpacity =\n        getValue(layer, 'paint', 'background-opacity', zoom, emptyObj);\n    }\n    if (layout.visibility == 'none') {\n      element.style.backgroundColor = '';\n      element.style.backgroundOpacity = '';\n    }\n  }\n  if (map.getTargetElement()) {\n    updateStyle();\n  }\n  map.on(['change:resolution', 'change:target'], updateStyle);\n}\n\n/**\n * Applies properties of the Mapbox Style's first `background` layer to the map.\n * @param {ol.Map} map OpenLayers Map.\n * @param {Object} glStyle Mapbox Style object.\n */\nexport function applyBackground(map, glStyle) {\n  glStyle.layers.some(function(l) {\n    if (l.type == 'background') {\n      setBackground(map, l);\n      return true;\n    }\n  });\n}\n\nfunction getSourceIdByRef(layers, ref) {\n  let sourceId;\n  layers.some(function(layer) {\n    if (layer.id == ref) {\n      sourceId = layer.source;\n      return true;\n    }\n  });\n  return sourceId;\n}\n\nfunction processStyle(glStyle, map, baseUrl, host, path, accessToken) {\n  const view = map.getView();\n  if ('center' in glStyle && !view.getCenter()) {\n    view.setCenter(fromLonLat(glStyle.center));\n  }\n  if ('zoom' in glStyle && view.getZoom() === undefined) {\n    view.setZoom(glStyle.zoom);\n  }\n  if (!view.getCenter() || view.getZoom() === undefined) {\n    view.fit(view.getProjection().getExtent(), {\n      nearest: true,\n      size: map.getSize()\n    });\n  }\n  if (glStyle.sprite) {\n    if (glStyle.sprite.indexOf('mapbox://') == 0) {\n      glStyle.sprite = baseUrl + '/sprite' + accessToken;\n    } else if (glStyle.sprite.indexOf('http') != 0) {\n      glStyle.sprite = (host ? (host + path) : '') + glStyle.sprite + accessToken;\n    }\n  }\n\n  const glLayers = glStyle.layers;\n  const geoJsonFormat = new GeoJSON();\n  let layerIds = [];\n\n\n  let glLayer, glSource, glSourceId, id, layer, mapid, transition, url;\n  for (let i = 0, ii = glLayers.length; i < ii; ++i) {\n    glLayer = glLayers[i];\n    if (glLayer.type == 'background') {\n      setBackground(map, glLayer);\n    } else {\n      id = glLayer.source || getSourceIdByRef(glLayers, glLayer.ref);\n      // this technique assumes gl layers will be in a particular order\n      if (id != glSourceId) {\n        finalizeLayer(layer, layerIds, glStyle, path, map);\n        layerIds = [];\n        glSource = glStyle.sources[id];\n        url = glSource.url;\n        let tiles = glSource.tiles;\n        if (url) {\n          if (url.indexOf('mapbox://') == 0) {\n            mapid = url.replace('mapbox://', '');\n            tiles = ['a', 'b', 'c', 'd'].map(function(host) {\n              return 'https://' + host + '.tiles.mapbox.com/v4/' + mapid +\n                  '/{z}/{x}/{y}.' +\n                  (glSource.type == 'vector' ? 'vector.pbf' : 'png') +\n                  accessToken;\n            });\n          }\n        }\n\n        if (glSource.type == 'vector') {\n          layer = tiles ? (function() {\n            const tileGrid = createXYZ({\n              tileSize: 512,\n              maxZoom: 'maxzoom' in glSource ? glSource.maxzoom : 22,\n              minZoom: glSource.minzoom\n            });\n            return new VectorTileLayer({\n              declutter: true,\n              maxResolution: tileGrid.getMinZoom() > 0 ?\n                tileGrid.getResolution(tileGrid.getMinZoom()) : undefined,\n              source: new VectorTileSource({\n                attributions: glSource.attribution,\n                format: new MVT(),\n                tileGrid: tileGrid,\n                urls: tiles\n              }),\n              visible: false,\n              zIndex: i\n            });\n          })() : (function() {\n            const layer = new VectorTileLayer({\n              declutter: true,\n              visible: false,\n              zIndex: i\n            });\n            const tilejson = new TileJSON({\n              url: url\n            });\n            const key = tilejson.on('change', function() {\n              if (tilejson.getState() == 'ready') {\n                const tileJSONDoc = tilejson.getTileJSON();\n                const tiles = Array.isArray(tileJSONDoc.tiles) ? tileJSONDoc.tiles : [tileJSONDoc.tiles];\n                for (let i = 0, ii = tiles.length; i < ii; ++i) {\n                  const tile = tiles[i];\n                  if (tile.indexOf('http') != 0) {\n                    tiles[i] = glSource.url + tile;\n                  }\n                }\n                const tileGrid = tilejson.getTileGrid();\n                layer.setSource(new VectorTileSource({\n                  attributions: tilejson.getAttributions() || tileJSONDoc.attribution,\n                  format: new MVT(),\n                  tileGrid: createXYZ({\n                    minZoom: tileGrid.getMinZoom(),\n                    maxZoom: tileGrid.getMaxZoom(),\n                    tileSize: 512\n                  }),\n                  urls: tiles\n                }));\n                if (tileGrid.getMinZoom() > 0) {\n                  layer.setMaxResolution(\n                    tileGrid.getResolution(tileGrid.getMinZoom()));\n                }\n                unByKey(key);\n              }\n            });\n            return layer;\n          })();\n        } else if (glSource.type == 'raster') {\n          let source;\n          if (!glSource.tiles) {\n            source = (function() {\n              return new TileJSON({\n                transition: transition,\n                url: url,\n                crossOrigin: 'anonymous'\n              });\n            })();\n          } else {\n            source = new XYZ({\n              transition: transition,\n              attributions: glSource.attribution,\n              minZoom: glSource.minzoom,\n              maxZoom: 'maxzoom' in glSource ? glSource.maxzoom : 22,\n              tileSize: glSource.tileSize || 512,\n              url: url,\n              urls: glSource.tiles,\n              crossOrigin: 'anonymous'\n            });\n            transition = 0;\n          }\n          source.setTileLoadFunction(function(tile, src) {\n            if (src.indexOf('{bbox-epsg-3857}') != -1) {\n              const bbox = source.getTileGrid().getTileCoordExtent(tile.getTileCoord());\n              src = src.replace('{bbox-epsg-3857}', bbox.toString());\n            }\n            tile.getImage().src = src;\n          });\n          layer = new TileLayer({\n            source: source,\n            visible: glLayer.layout ? glLayer.layout.visibility !== 'none' : true\n          });\n        } else if (glSource.type == 'geojson') {\n          const data = glSource.data;\n          let features, geoJsonUrl;\n          if (typeof data == 'string') {\n            geoJsonUrl = withPath(data, path);\n          } else {\n            features = geoJsonFormat.readFeatures(data, {featureProjection: 'EPSG:3857'});\n          }\n          layer = new VectorLayer({\n            source: new VectorSource({\n              attributions: glSource.attribution,\n              features: features,\n              format: geoJsonFormat,\n              url: geoJsonUrl\n            }),\n            visible: false,\n            zIndex: i\n          });\n        }\n        glSourceId = id;\n      }\n      layerIds.push(glLayer.id);\n    }\n  }\n  finalizeLayer(layer, layerIds, glStyle, path, map);\n  map.set('mapbox-style', glStyle);\n}\n\n/**\n * Loads and applies a Mapbox Style object to an OpenLayers Map. This includes\n * the map background, the layers, the center and the zoom.\n *\n * The center and zoom will only be set if present in the Mapbox Style document,\n * and if not already set on the OpenLayers map.\n *\n * Layers will be added to the OpenLayers map, without affecting any layers that\n * might already be set on the map.\n *\n * Layers added by `apply()` will have two additional properties:\n *\n *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the\n *    OpenLayers layer was created from. Usually `apply()` creates one\n *    OpenLayers layer per Mapbox Style source, unless the layer stack has\n *    layers from different sources in between.\n *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are\n *    included in the OpenLayers layer.\n *\n * The map returned by this function will have an additional `mapbox-style`\n * property which holds the Mapbox Style object.\n *\n * @param {ol.Map|HTMLElement|string} map Either an existing OpenLayers Map\n * instance, or a HTML element, or the id of a HTML element that will be the\n * target of a new OpenLayers Map.\n * @param {string|Object} style JSON style object or style url pointing to a\n * Mapbox Style object. When using Mapbox APIs, the url must contain an access\n * token and look like\n * `https://api.mapbox.com/styles/v1/mapbox/bright-v9?access_token=[your_access_token_here]`.\n * When passed as JSON style object, all OpenLayers layers created by `apply()`\n * will be immediately available, but they may not have a source yet (i.e. when\n * they are defined by a TileJSON url in the Mapbox Style document). When passed\n * as style url, layers will be added to the map when the Mapbox Style document\n * is loaded and parsed.\n * @return {ol.Map} The OpenLayers Map instance that will be populated with the\n * contents described in the Mapbox Style object.\n */\nexport function apply(map, style) {\n\n  let accessToken, baseUrl, host, path;\n  accessToken = baseUrl = host = path = '';\n\n  if (!(map instanceof Map)) {\n    map = new Map({\n      target: map\n    });\n  }\n\n  if (typeof style === 'string') {\n    const parts = style.match(spriteRegEx);\n    if (parts) {\n      baseUrl = parts[1];\n      accessToken = parts.length > 2 ? parts[2] : '';\n    }\n\n    fetch(style, {\n      credentials: 'same-origin'\n    })\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(glStyle) {\n        const a = document.createElement('A');\n        a.href = style;\n        path = a.pathname.split('/').slice(0, -1).join('/') + '/';\n        host = style.substr(0, style.indexOf(path));\n\n        processStyle(glStyle, map, baseUrl, host, path, accessToken);\n      })\n      .catch(function(err) {\n        throw new Error(`Could not load ${style}: ${err.message}`);\n      });\n  } else {\n    setTimeout(function() {\n      processStyle(style, map);\n    }, 0);\n  }\n  return map;\n}\n\n\n/**\n * @private\n * If layerIds is not empty, applies the style specified in glStyle to the layer,\n * and adds the layer to the map.\n *\n * The layer may not yet have a source when the function is called.  If so, the style\n * is applied to the layer via a once listener on the 'change:source' event.\n *\n * @param {ol.Map|HTMLElement|string} layer Either an existing OpenLayers Map\n * instance, or a HTML element, or the id of a HTML element that will be the\n * target of a new OpenLayers Map.\n * @param {array} layerIds Array containing ids of already-processed layers.\n * @param {ol.Map|HTMLElement|string} glStyle Style as a JSON object.\n * @param {ol.Map|HTMLElement|string} path The path part of the URL to the style,\n * if the style was defined as a string.  (Why this if glStyle already being passed?)\n * @param {ol.Map|HTMLElement|string} map Either an existing OpenLayers Map\n * instance, or a HTML element, or the id of a HTML element that will be the\n * target of a new OpenLayers Map.\n * @return {Promise} Returns a promise that resolves after the source has\n * been set on the specified layer, and the style has been applied.\n */\nexport function finalizeLayer(layer, layerIds, glStyle, path, map) {\n  return new Promise(function(resolve, reject) {\n    if (layerIds.length > 0) {\n\n      const setStyle = function() {\n        const source = layer.getSource();\n        if ((source instanceof VectorSource) || (source instanceof VectorTileSource)) {\n          applyStyle(layer, glStyle, layerIds, path).then(function() {\n            layer.setVisible(true);\n            resolve();\n          }, function(e) {\n            reject(e);\n          });\n        } else {\n          layer.setVisible(true);\n          resolve();\n        }\n      };\n\n      map.addLayer(layer);\n      if (layer.getSource()) {\n        setStyle();\n      } else {\n        layer.once('change:source', setStyle);\n      }\n    } else {\n      resolve();\n    }\n  });\n}\n\n\n/**\n * Get the OpenLayers layer instance that contains the provided Mapbox Style\n * `layer`. Note that multiple Mapbox Style layers are combined in a single\n * OpenLayers layer instance when they use the same Mapbox Style `source`.\n * @param {ol.Map} map OpenLayers Map.\n * @param {string} layerId Mapbox Style layer id.\n * @return {ol.layer.Layer} layer OpenLayers layer instance.\n */\nexport function getLayer(map, layerId) {\n  const layers = map.getLayers().getArray();\n  for (let i = 0, ii = layers.length; i < ii; ++i) {\n    if (layers[i].get('mapbox-layers').indexOf(layerId) !== -1) {\n      return layers[i];\n    }\n  }\n}\n\n/**\n * Get the OpenLayers source instance for the provided Mapbox Style `source`.\n * @param {ol.Map} map OpenLayers Map.\n * @param {string} sourceId Mapbox Style source id.\n * @return {ol.layer.Layer} layer OpenLayers layer instance.\n */\nexport function getSource(map, sourceId) {\n  const layers = map.getLayers().getArray();\n  for (let i = 0, ii = layers.length; i < ii; ++i) {\n    const source = layers[i].getSource();\n    if (layers[i].get('mapbox-source').indexOf(sourceId) !== -1) {\n      return source;\n    }\n  }\n}\n"],"file":"index.js"}